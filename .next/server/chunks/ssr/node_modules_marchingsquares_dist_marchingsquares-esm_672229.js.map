{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/node_modules/marchingsquares/dist/marchingsquares-esm.js"],"sourcesContent":["/*!\n* MarchingSquaresJS\n* version 1.3.3\n* https://github.com/RaumZeit/MarchingSquares.js\n*\n* @license GNU Affero General Public License.\n* Copyright (c) 2015-2019 Ronny Lorenz <ronny@tbi.univie.ac.at>\n*/\n\n\n/*\n *  Compute the distance of a value 'v' from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear(a, b, v) {\n  if (a < b)\n    return (v - a) / (b - a);\n\n  return (a - v) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function assumes that exactly one value, 'v0' or 'v1', is actually located\n *  between 'a' and 'b', and choses the right one automagically\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_ab(a, b, v0, v1) {\n  var tmp;\n\n  if (v0 > v1) {\n    tmp = v0;\n    v0  = v1;\n    v1  = tmp;\n  }\n\n  if (a < b) {\n    if (a < v0)\n      return (v0 - a) / (b - a);\n    else\n      return (v1 - a) / (b - a);\n  } else if (a > v1) {\n    return (a - v1) / (a - b);\n  }\n\n  return (a - v0) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'a'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_a(a, b, minV, maxV) {\n  if (a < b)\n    return (minV - a) / (b - a);\n\n  return (a - maxV) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_b(a, b, minV, maxV) {\n  if (a < b)\n    return (maxV - a) / (b - a);\n\n  return (a - minV) / (a - b);\n}\n\nfunction Options() {\n  /* Settings common to all implemented algorithms */\n  this.successCallback  = null;\n  this.verbose          = false;\n  this.polygons         = false;\n  this.polygons_full    = false;\n  this.linearRing       = true;\n  this.noQuadTree       = false;\n  this.noFrame          = false;\n}\n\n\n/* Compose settings specific to IsoBands algorithm */\nfunction isoBandOptions(userSettings) {\n  var i,\n    key,\n    val,\n    bandOptions,\n    optionKeys;\n\n  bandOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(bandOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      bandOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  bandOptions.polygons_full  = !bandOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  bandOptions.interpolate   = linear_ab;\n  bandOptions.interpolate_a = linear_a;\n  bandOptions.interpolate_b = linear_b;\n\n  return bandOptions;\n}\n\n\n/* Compose settings specific to IsoLines algorithm */\nfunction isoLineOptions(userSettings) {\n  var i,\n    key,\n    val,\n    lineOptions,\n    optionKeys;\n\n  lineOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(lineOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      lineOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  lineOptions.polygons_full  = !lineOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  lineOptions.interpolate   = linear;\n\n  return lineOptions;\n}\n\nfunction cell2Polygons(cell, x, y, settings) {\n  var polygons = [];\n\n  cell.polygons.forEach(function(p) {\n    p.forEach(function(pp) {\n      pp[0] += x;\n      pp[1] += y;\n    });\n\n    if (settings.linearRing)\n      p.push(p[0]);\n\n    polygons.push(p);\n  });\n\n  return polygons;\n}\n\nfunction entry_coordinate(x, y, mode, path) {\n  if (mode === 0) { /* down */\n    x += 1;\n    y += path[0][1];\n  } else if (mode === 1) { /* left */\n    x += path[0][0];\n  } else if (mode === 2) { /* up */\n    y += path[0][1];\n  } else if (mode === 3) { /* right */\n    x += path[0][0];\n    y += 1;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction skip_coordinate(x, y, mode) {\n  if (mode === 0) { /* down */\n    x++;\n  } else if (mode === 1) ; else if (mode === 2) { /* up */\n    y++;\n  } else if (mode === 3) { /* right */\n    x++;\n    y++;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction requireFrame(data, lowerBound, upperBound) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] < lowerBound) ||\n        (data[j][0] > upperBound) ||\n        (data[j][cols - 1] < lowerBound) ||\n        (data[j][cols - 1] > upperBound)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] < lowerBound) ||\n      (data[rows - 1][0] > upperBound) ||\n      (data[rows - 1][cols - 1] < lowerBound) ||\n      (data[rows - 1][cols - 1] > upperBound))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] < lowerBound) ||\n          (data[0][i] > upperBound) ||\n          (data[rows - 1][i] < lowerBound) ||\n          (data[rows - 1][i] > upperBound)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n\n  return frameRequired;\n}\n\n\nfunction requireLineFrame(data, threshold) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] >= threshold) ||\n        (data[j][cols - 1] >= threshold)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] >= threshold) ||\n      (data[rows - 1][cols - 1] >= threshold))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] >= threshold) ||\n          (data[rows - 1][i] > threshold)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n  return frameRequired;\n}\n\n\nfunction traceBandPaths(data, cellGrid, settings) {\n  var nextedge,\n    path,\n    e,\n    ee,\n    s,\n    ve,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    cc,\n    dir,\n    count,\n    point,\n    found_entry;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ ['rt', 'rb'], /* down */\n    ['br', 'bl'], /* left */\n    ['lb', 'lt'], /* up */\n    ['tl', 'tr']  /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var available_starts = [ 'bl', 'lb', 'lt', 'tl', 'tr', 'rt', 'rb', 'br' ];\n  var entry_dir     =  {\n    bl: 1, br: 1,\n    lb: 2, lt: 2,\n    tl: 3, tr: 3,\n    rt: 0, rb: 0\n  };\n\n  if (requireFrame(data, settings.minV, settings.maxV)) {\n    if (settings.linearRing)\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n    else\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n  }\n\n  /* finally, start tracing back first polygon(s) */\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 8; e++) {\n        nextedge = available_starts[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            } else {\n              throw new Error('Left the grid somewhere in the interior!');\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                for (s = 0; s < valid_entries[dir].length; s++) {\n                  ve = valid_entries[dir][s];\n                  if (typeof cc.edges[ve] === 'object') {\n                    /* found re-entry */\n                    ee = cc.edges[ve];\n                    path.push(entry_coordinate(x, y, dir, ee.path));\n                    enter = ve;\n                    found_entry = true;\n                    break;\n                  }\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n          ((path[path.length - 1][0] !== origin[0]) ||\n          (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n\nfunction traceLinePaths(data, cellGrid, settings) {\n  var nextedge,\n    e,\n    ee,\n    cc,\n    path,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    point,\n    dir,\n    count,\n    found_entry,\n    ve;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ 'right',  /* down */\n    'bottom', /* left */\n    'left',   /* up */\n    'top'     /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var entry_dir     =  {\n    bottom: 1,\n    left: 2,\n    top: 3,\n    right: 0\n  };\n\n  /* first, detect whether we need any outer frame */\n  if (!settings.noFrame)\n    if (requireLineFrame(data, settings.threshold)) {\n      if (settings.linearRing)\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n      else\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n    }\n\n  /* finally, start tracing back first polygon(s) */\n\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 4; e++) {\n        nextedge = valid_entries[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n\n            if (!settings.linearRing)\n              break;\n\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                ve = valid_entries[dir];\n                if (typeof cc.edges[ve] === 'object') {\n                  /* found re-entry */\n                  ee = cc.edges[ve];\n                  path.push(entry_coordinate(x, y, dir, ee.path));\n                  enter = ve;\n                  found_entry = true;\n                  break;\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                  (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                  /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n            ((path[path.length - 1][0] !== origin[0]) ||\n            (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n/* quadTree node constructor */\nfunction TreeNode(data, x, y, dx, dy) {\n  var dx_tmp = dx,\n    dy_tmp = dy,\n    msb_x  = 0,\n    msb_y  = 0;\n\n  /* left-bottom corner of current quadrant */\n  this.x = x;\n  this.y = y;\n\n  /* minimum value in subtree under this node */\n  this.lowerBound = null;\n  /* maximum value in subtree under this node */\n  this.upperBound = null;\n\n  /*\n   *  child nodes are layed out in the following way:\n   *\n   *  (x, y + 1) ---- (x + 1, y + 1)\n   *  |             |              |\n   *  |      D      |      C       |\n   *  |             |              |\n   *  |----------------------------|\n   *  |             |              |\n   *  |      A      |      B       |\n   *  |             |              |\n   *  (x, y) ------------ (x + 1, y)\n   */\n  this.childA = null;\n  this.childB = null;\n  this.childC = null;\n  this.childD = null;\n\n  if ((dx === 1) && (dy === 1)) {\n    /* do not further subdivision */\n    this.lowerBound = Math.min(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n    this.upperBound = Math.max(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n  } else {\n    /* get most significant bit from dx */\n    if (dx > 1) {\n      while (dx_tmp !== 0) {\n        dx_tmp = dx_tmp >> 1;\n        msb_x++;\n      }\n\n      if (dx === (1 << (msb_x - 1)))\n        msb_x--;\n\n      dx_tmp = 1 << (msb_x - 1);\n    }\n\n    /* get most significant bit from dx */\n    if (dy > 1) {\n      while (dy_tmp !== 0) {\n        dy_tmp = dy_tmp >> 1;\n        msb_y++;\n      }\n\n      if (dy === (1 << (msb_y - 1)))\n        msb_y--;\n\n      dy_tmp = 1 << (msb_y - 1);\n    }\n\n    this.childA = new TreeNode(data, x, y, dx_tmp, dy_tmp);\n    this.lowerBound = this.childA.lowerBound;\n    this.upperBound = this.childA.upperBound;\n\n    if (dx - dx_tmp > 0) {\n      this.childB = new TreeNode(data, x + dx_tmp, y, dx - dx_tmp, dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childB.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childB.upperBound);\n\n      if (dy - dy_tmp > 0) {\n        this.childC = new TreeNode(data, x + dx_tmp, y + dy_tmp, dx - dx_tmp, dy - dy_tmp);\n        this.lowerBound = Math.min(this.lowerBound, this.childC.lowerBound);\n        this.upperBound = Math.max(this.upperBound, this.childC.upperBound);\n      }\n    }\n\n    if (dy - dy_tmp > 0) {\n      this.childD = new TreeNode(data, x, y + dy_tmp, dx_tmp, dy - dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childD.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childD.upperBound);\n    }\n  }\n}\n\n\n/**\n *  Retrieve a list of cells within a particular range of values by\n *  recursivly traversing the quad tree to it's leaves.\n *\n *  @param  subsumed  If 'true' include all cells that are completely\n *                    subsumed within the specified range. Otherwise,\n *                    return only cells where at least one corner is\n *                    outside the specified range.\n *\n *  @return   An array of objects 'o' where each object has exactly two\n *            properties: 'o.x' and 'o.y' denoting the left-bottom corner\n *            of the corresponding cell.\n */\nTreeNode.prototype.cellsInBand = function(lowerBound, upperBound, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if ((this.lowerBound > upperBound) || (this.upperBound < lowerBound))\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.lowerBound <= lowerBound) ||\n        (this.upperBound >= upperBound)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsInBand(lowerBound, upperBound, subsumed));\n  }\n\n  return cells;\n};\n\n\nTreeNode.prototype.cellsBelowThreshold = function(threshold, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if (this.lowerBound > threshold)\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.upperBound >= threshold)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsBelowThreshold(threshold, subsumed));\n  }\n\n  return cells;\n};\n\n\n/*\n * Given a scalar field `data` construct a QuadTree\n * to efficiently lookup those parts of the scalar\n * field where values are within a particular\n * range of [lowerbound, upperbound] limits.\n */\nfunction QuadTree(data) {\n  var i, cols;\n\n  /* do some input checking */\n  if (!data)\n    throw new Error('data is required');\n\n  if (!Array.isArray(data) ||\n      !Array.isArray(data[0]))\n    throw new Error('data must be scalar field, i.e. array of arrays');\n\n  if (data.length < 2)\n    throw new Error('data must contain at least two rows');\n\n  /* check if we've got a regular grid */\n  cols = data[0].length;\n\n  if (cols < 2)\n    throw new Error('data must contain at least two columns');\n\n  for (i = 1; i < data.length; i++) {\n    if (!Array.isArray(data[i]))\n      throw new Error('Row ' + i + ' is not an array');\n\n    if (data[i].length != cols)\n      throw new Error('unequal row lengths detected, please provide a regular grid');\n  }\n\n  /* create pre-processing object */\n  this.data = data;\n  /* root node, i.e. entry to the data */\n  this.root = new TreeNode(data, 0, 0, data[0].length - 1, data.length - 1);\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * Compute the iso lines for a scalar 2D field given\n * a certain threshold by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n */\n\nfunction isoLines(input, threshold, options) {\n  var settings,\n    i,\n    j,\n    useQuadTree   = false,\n    multiLine     = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    linePolygons  = null,\n    ret           = [];\n\n  /* validation */\n  if (!input) throw new Error('data is required');\n  if (threshold === undefined || threshold === null) throw new Error('threshold is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  /* process options */\n  settings = isoLineOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input threshold(s) */\n  if (Array.isArray(threshold)) {\n    multiLine = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < threshold.length; i++)\n      if (isNaN(+threshold[i]))\n        throw new Error('threshold[' + i + '] is not a number');\n  } else {\n    if (isNaN(+threshold))\n      throw new Error('threshold must be a number or array of numbers');\n\n    threshold = [ threshold ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoLines: returning single lines (polygons) for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoLines: returning line paths (polygons) for entire data grid');\n\n    if (multiLine)\n      console.log('MarchingSquaresJS-isoLines: multiple lines requested, returning array of line paths instead of lines for a single threshold');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all threhsold values */\n  threshold.forEach(function(t, i) {\n    linePolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.threshold = t;\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoLines: computing iso lines for threshold ' + t);\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsBelowThreshold(settings.threshold, true)\n          .forEach(function(c) {\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsBelowThreshold(settings.threshold, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      linePolygons = traceLinePaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiLine)\n      ret.push(linePolygons);\n    else\n      ret = linePolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, t);\n\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n * ################################\n * Isocontour implementation below\n * ################################\n */\n\nfunction prepareCell(grid, x, y, settings) {\n  var left,\n    right,\n    top,\n    bottom,\n    average,\n    cell;\n\n  var cval      = 0;\n  var x3        = grid[y + 1][x];\n  var x2        = grid[y + 1][x + 1];\n  var x1        = grid[y][x + 1];\n  var x0        = grid[y][x];\n  var threshold = settings.threshold;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) smaller, or (ii)\n   * greater or equal to the iso line threshold. We encode\n   * this property using 1 bit of information, where\n   *\n   * 0 ... below,\n   * 1 ... above or equal\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 is the least significant bit (0th),\n   * x1 the 2nd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= ((x3 >= threshold) ? 8 : 0);\n  cval |= ((x2 >= threshold) ? 4 : 0);\n  cval |= ((x1 >= threshold) ? 2 : 0);\n  cval |= ((x0 >= threshold) ? 1 : 0);\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /* compose the cell object */\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   */\n  switch (cval) {\n  case 0:\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 15:\n    /* cell is outside (above) threshold, no polygons */\n    break;\n\n  case 14: /* 1110 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n\n    break;\n\n  case 13: /* 1101 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n\n    break;\n\n  case 11: /* 1011 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [1, right], [top, 1], [1, 1] ]);\n\n    break;\n\n  case 7: /* 0111 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [top, 1], [0, left], [0, 1] ]);\n\n    break;\n\n  case 1: /* 0001 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [0, left], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 2: /* 0010 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, right], [bottom, 0] ]);\n\n    break;\n\n  case 4: /* 0100 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [1, right], [1, 0] ]);\n\n    break;\n\n  case 8: /* 1000 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 12: /* 1100 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [1, right], [1, 0] ]);\n\n    break;\n\n  case 9: /* 1001 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 3: /* 0011 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, left], [0, 1], [1, 1], [1, right] ]);\n\n    break;\n\n  case 6: /* 0110 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [bottom, 0] ]);\n\n    break;\n\n  case 10: /* 1010 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.left = {\n          path: [ [0, left], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.right = {\n          path: [ [1, right], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      } else {\n        cell.edges.right = {\n          path: [ [1, right], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.left = {\n          path: [ [0, left], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, right], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n        cell.polygons.push([ [top, 1], [1, 1], [1, right] ]);\n      }\n    }\n\n    break;\n\n  case 5: /* 0101 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.top = {\n          path: [ [top, 1], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      } else {\n        cell.edges.top = {\n          path: [ [top, 1], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1], [1, right], [1, 0], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1] ]);\n        cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n      }\n    }\n\n    break;\n  }\n\n  return cell;\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * lookup table to generate polygon paths or edges required to\n * trace the full polygon(s)\n */\nvar shapeCoordinates = {\n  square:       function(cell, x0, x1, x2, x3, opt) {\n    if (opt.polygons)\n      cell.polygons.push([ [0,0], [0, 1], [1, 1], [1, 0] ]);\n  },\n\n  triangle_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [bottomleft, 0], [0, 0] ]);\n  },\n\n  triangle_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [1, rightbottom], [1, 0] ]);\n  },\n\n  triangle_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, righttop], [topright, 1], [1, 1] ]);\n  },\n\n  triangle_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1] ]);\n  },\n\n  tetragon_t:   function(cell, x0, x1, x2, x3, opt) {\n    var righttop  = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var lefttop   = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, righttop] ]);\n  },\n\n  tetragon_r:   function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  tetragon_b:   function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, rightbottom], [1, 0] ]);\n  },\n\n  tetragon_l:   function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [bottomleft, 0] ]);\n  },\n\n  tetragon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [bottomright, 0] ]);\n  },\n\n  tetragon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  tetragon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [topleft, 1] ],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, rightbottom], [topleft, 1], [topright, 1], [1, righttop] ]);\n  },\n\n  tetragon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr = {\n        path: [ [topright, 1], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [0, leftbottom], [0, lefttop], [topleft, 1] ]);\n  },\n\n  tetragon_lr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [1, righttop], [1, rightbottom] ]);\n  },\n\n  tetragon_tb:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr =  {\n        path: [ [topright, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [topleft, 1], [topright, 1], [bottomright, 0] ]);\n  },\n\n  pentagon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, rightbottom]],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  pentagon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_tr_rl: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom] ]);\n  },\n\n  pentagon_rb_bt: function(cell, x0, x1, x2, x3, opt) {\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [1, 1], [1, righttop], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_lr: function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_lt_tb: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_tb: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [ topleft, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_lt_rl: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop] ]);\n  },\n\n  pentagon_tr_bt: function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topleft, 1], [topright, 1], [1, rightbottom], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_rb_lr: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  hexagon_bl_lt:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  hexagon_bl_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  hexagon_tr_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  hexagon_bl_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, lefttop], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  heptagon_tr:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  heptagon_bl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  heptagon_tl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  heptagon_br:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright,0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  octagon:        function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  }\n};\n\n\n/*\n * Compute isobands(s) for a scalar 2D field given a certain\n * threshold and a bandwidth by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n * either for individual polygons within each grid cell, or the\n * outline of connected polygons.\n */\nfunction isoBands(input, minV, bandWidth, options) {\n  var i,\n    j,\n    settings,\n    useQuadTree   = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    multiBand     = false,\n    bw            = [],\n    bandPolygons  = [],\n    ret           = [];\n\n  /* basic input validation */\n  if (!input) throw new Error('data is required');\n  if (minV === undefined || minV === null) throw new Error('lowerBound is required');\n  if (bandWidth === undefined || bandWidth === null) throw new Error('bandWidth is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  settings = isoBandOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input thresholds */\n  if (Array.isArray(minV)) {\n    multiBand = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < minV.length; i++)\n      if (isNaN(+minV[i]))\n        throw new Error('lowerBound[' + i + '] is not a number');\n\n    if (Array.isArray(bandWidth)) {\n      if (minV.length !== bandWidth.length)\n        throw new Error('lowerBound and bandWidth have unequal lengths');\n\n      /* check bandwidth values */\n      for (i = 0; i < bandWidth.length; i++)\n        if (isNaN(+bandWidth[i]))\n          throw new Error('bandWidth[' + i + '] is not a number');\n    } else {\n      if (isNaN(+bandWidth))\n        throw new Error('bandWidth must be a number');\n\n      bw = [];\n      for (i = 0; i < minV.length; i++) {\n        bw.push(bandWidth);\n      }\n      bandWidth = bw;\n    }\n  } else {\n    if (isNaN(+minV))\n      throw new Error('lowerBound must be a number');\n\n    minV = [ minV ];\n\n    if (isNaN(+bandWidth))\n      throw new Error('bandWidth must be a number');\n\n    bandWidth = [ bandWidth ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoBands: returning single polygons for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoBands: returning polygon paths for entire data grid');\n\n    if (multiBand)\n      console.log('MarchingSquaresJS-isoBands: multiple bands requested, returning array of band polygons instead of polygons for a single band');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all minV values */\n  minV.forEach(function(lowerBound, b) {\n    bandPolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.minV = lowerBound;\n    settings.maxV = lowerBound + bandWidth[b];\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoBands: computing isobands for [' + lowerBound + ':' + (lowerBound + bandWidth[b]) + ']');\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsInBand(settings.minV, settings.maxV, true)\n          .forEach(function(c) {\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsInBand(settings.minV, settings.maxV, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell$1(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell$1(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      bandPolygons = traceBandPaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiBand)\n      ret.push(bandPolygons);\n    else\n      ret = bandPolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, lowerBound, bandWidth[b]);\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n *  For isoBands, each square is defined by the three states\n * of its corner points. However, since computers use power-2\n * values, we use 2bits per trit, i.e.:\n *\n * 00 ... below minV\n * 01 ... between minV and maxV\n * 10 ... above maxV\n *\n * Hence we map the 4-trit configurations as follows:\n *\n * 0000 => 0\n * 0001 => 1\n * 0002 => 2\n * 0010 => 4\n * 0011 => 5\n * 0012 => 6\n * 0020 => 8\n * 0021 => 9\n * 0022 => 10\n * 0100 => 16\n * 0101 => 17\n * 0102 => 18\n * 0110 => 20\n * 0111 => 21\n * 0112 => 22\n * 0120 => 24\n * 0121 => 25\n * 0122 => 26\n * 0200 => 32\n * 0201 => 33\n * 0202 => 34\n * 0210 => 36\n * 0211 => 37\n * 0212 => 38\n * 0220 => 40\n * 0221 => 41\n * 0222 => 42\n * 1000 => 64\n * 1001 => 65\n * 1002 => 66\n * 1010 => 68\n * 1011 => 69\n * 1012 => 70\n * 1020 => 72\n * 1021 => 73\n * 1022 => 74\n * 1100 => 80\n * 1101 => 81\n * 1102 => 82\n * 1110 => 84\n * 1111 => 85\n * 1112 => 86\n * 1120 => 88\n * 1121 => 89\n * 1122 => 90\n * 1200 => 96\n * 1201 => 97\n * 1202 => 98\n * 1210 => 100\n * 1211 => 101\n * 1212 => 102\n * 1220 => 104\n * 1221 => 105\n * 1222 => 106\n * 2000 => 128\n * 2001 => 129\n * 2002 => 130\n * 2010 => 132\n * 2011 => 133\n * 2012 => 134\n * 2020 => 136\n * 2021 => 137\n * 2022 => 138\n * 2100 => 144\n * 2101 => 145\n * 2102 => 146\n * 2110 => 148\n * 2111 => 149\n * 2112 => 150\n * 2120 => 152\n * 2121 => 153\n * 2122 => 154\n * 2200 => 160\n * 2201 => 161\n * 2202 => 162\n * 2210 => 164\n * 2211 => 165\n * 2212 => 166\n * 2220 => 168\n * 2221 => 169\n * 2222 => 170\n */\n\n/*\n * ####################################\n * Some small helper functions\n * ####################################\n */\n\nfunction computeCenterAverage(bl, br, tr, tl, minV, maxV) {\n  var average = (tl + tr + br + bl) / 4;\n\n  if (average > maxV)\n    return 2; /* above isoband limits */\n\n  if (average < minV)\n    return 0; /* below isoband limits */\n\n  return 1; /* within isoband limits */\n}\n\n\nfunction prepareCell$1(grid, x, y, opt) {\n  var cell,\n    center_avg;\n\n  /*  compose the 4-trit corner representation */\n  var cval = 0;\n  var x3 = grid[y + 1][x];\n  var x2 = grid[y + 1][x + 1];\n  var x1 = grid[y][x + 1];\n  var x0 = grid[y][x];\n  var minV  = opt.minV;\n  var maxV  = opt.maxV;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) below, (ii) within,\n   * or (iii) above the values of the isoband limits. We\n   * encode this property using 2 bits of information, where\n   *\n   * 00 ... below,\n   * 01 ... within, and\n   * 10 ... above\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 are the two least significant bits (0th, 1st),\n   * x1 the 2nd and 3rd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= (x3 < minV) ? 0 : (x3 > maxV) ? 128 : 64;\n  cval |= (x2 < minV) ? 0 : (x2 > maxV) ? 32 : 16;\n  cval |= (x1 < minV) ? 0 : (x1 > maxV) ? 8 : 4;\n  cval |= (x0 < minV) ? 0 : (x0 > maxV) ? 2 : 1;\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /*\n   * cell center average trit for ambiguous cases, where\n   * 0 ... below iso band\n   * 1 ... within iso band\n   * 2 ... above isoband\n   */\n  center_avg = 0;\n\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3,\n    x:            x,\n    y:            y\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   * according to look-up table\n   */\n  switch (cval) {\n  case 85:  /* 1111 */\n    shapeCoordinates.square(cell, x0, x1, x2, x3, opt);\n    /* fall through */\n  case 0:   /* 0000 */\n    /* fall through */\n  case 170: /* 2222 */\n    break;\n\n    /* single triangle cases */\n\n  case 169: /* 2221 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 166: /* 2212 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 154: /* 2122 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 106: /* 1222 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 1: /* 0001 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 4: /* 0010 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 16: /* 0100 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 64: /* 1000 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single trapezoid cases */\n\n  case 168: /* 2220 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 162: /* 2202 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 138: /* 2022 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 42: /* 0222 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 2: /* 0002 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 8: /* 0020 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 32: /* 0200 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 128: /* 2000 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single rectangle cases */\n\n  case 5: /* 0011 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 20: /* 0110 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 80: /* 1100 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 65: /* 1001 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 165: /* 2211 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 150: /* 2112 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 90: /* 1122 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 105: /* 1221 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 160: /* 2200 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 130: /* 2002 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 10: /* 0022 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 40: /* 0220 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single pentagon cases */\n\n  case 101: /* 1211 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 149: /* 2111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 86: /* 1112 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 89: /* 1121 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 69: /* 1011 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 21: /* 0111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 84: /* 1110 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 81: /* 1101 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 96: /* 1200 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 24: /* 0120 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 6: /* 0012 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 129: /* 2001 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 74: /* 1022 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 146: /* 2102 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 164: /* 2210 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 41: /* 0221 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 66: /* 1002 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 144: /* 2100 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 36: /* 0210 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 9: /* 0021 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 104: /* 1220 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 26: /* 0122 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 134: /* 2012 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 161: /* 2201 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single hexagon cases */\n\n  case 37: /* 0211 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 148: /* 2110 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 82: /* 1102 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 73: /* 1021 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 133: /* 2011 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 22: /* 0112 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 88: /* 1120 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 97: /* 1201 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 145: /* 2101 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 25: /* 0121 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 70: /* 1012 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 100: /* 1210 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* 6-sided saddles */\n\n  case 17: /* 0101 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 68: /* 1010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 153: /* 2121 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 102: /* 1212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 7-sided saddles */\n\n  case 152: /* 2120 */\n\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 137: /* 2021 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 98: /* 1202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 38: /* 0212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 18: /* 0102 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 33: /* 0201 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 72: /* 1020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 132: /* 2010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 8-sided saddles */\n\n  case 136: /* 2020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 34: /* 0202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n  }\n\n  return cell;\n}\n\nexport { isoLines, isoLines as isoContours, isoBands, QuadTree, QuadTree as quadTree };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4531, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}