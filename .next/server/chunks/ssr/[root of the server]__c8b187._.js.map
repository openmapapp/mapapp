{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/layout/ThemeProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKO,SAAS,cAAc,EAC5B,QAAQ,EACR,GAAG,OAC6C;IAChD,qBAAO,8OAAC,gJAAA,CAAA,gBAAkB;QAAE,GAAG,KAAK;kBAAG;;;;;;AACzC"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/globalSettings.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\n\n// Fetch Global Settings\nexport async function getGlobalSettings() {\n  const settings = await db.globalSettings.findFirst();\n  return settings;\n}\n"],"names":[],"mappings":";;;;;IAKsB"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/adminActions.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\nimport { requireRole } from \"@/app/lib/requireRole\";\nimport type { Session } from \"@/app/lib/auth-client\";\n\n// ✅ Update Global Settings (Admins only)\nexport async function updateGlobalSettings(session: Session, updatedSettings) {\n  requireRole(session, \"admin\");\n\n  const { id, ...settingWithoutId } = updatedSettings;\n\n  return await db.globalSettings.update({\n    where: { id: 1 },\n    data: settingWithoutId,\n  });\n}\n"],"names":[],"mappings":";;;;;IAOsB"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReportTypes.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReportTypes() {\n  // Fetch the report types from the database.\n  const types = await db.reportType.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return types.map((type) => ({\n    id: type.id,\n    name: type.name,\n    fields: type.fields,\n  }));\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReports.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReports(timeRange: number = 4) {\n  const cutoffTime = new Date();\n  cutoffTime.setHours(cutoffTime.getHours() - timeRange);\n\n  // Fetch the report types from the database.\n  const reports = await db.report.findMany({\n    where: {\n      createdAt: {\n        gte: cutoffTime,\n      },\n    },\n    orderBy: {\n      createdAt: \"desc\",\n    },\n  });\n  // Map the result to a simpler array of objects if needed.\n  return reports;\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/layout/DataProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n  Dispatch,\n  SetStateAction,\n} from \"react\";\nimport { getGlobalSettings } from \"@/actions/globalSettings\";\nimport { updateGlobalSettings } from \"@/actions/adminActions\";\nimport { getReportTypes } from \"@/actions/getReportTypes\";\nimport { getReports } from \"@/actions/getReports\";\nimport { io } from \"socket.io-client\";\n\n// Define types for global settings, reports, report types, and user settings\ninterface GlobalSettings {\n  id: number;\n  mapCenterLat: number;\n  mapCenterLng: number;\n  mapBoundsSwLat: number;\n  mapBoundsSwLng: number;\n  mapBoundsNeLat: number;\n  mapBoundsNeLng: number;\n  registrationMode: \"open\" | \"invite\" | \"closed\";\n  inviteCodes: string;\n  mapOpenToVisitors: boolean;\n  submitReportsOpen: boolean;\n  votesOpenToVisitors: boolean;\n  mapZoom: number;\n  mapMaxZoom: number;\n  mapMinZoom: number;\n  mapApiKey: string;\n}\n\ninterface ReportType {\n  id: number;\n  name: string;\n}\n\ninterface Report {\n  id: number;\n  reportTypeId: number;\n  lat: number;\n  long: number;\n  description: string | null;\n  image: string | null;\n  createdAt: string; // Prisma usually returns ISO date strings\n  updatedAt: string;\n  departedAt: string | null;\n  trustScore: number;\n  submittedById: string;\n}\n\ninterface UserSettings {\n  theme: \"light\" | \"dark\";\n}\n\ninterface DataContextType {\n  globalSettings: GlobalSettings | null;\n  updateSettings: (session: any, newSettings: GlobalSettings) => Promise<void>;\n  reportTypes: ReportType[];\n  reports: Report[];\n  setReports: Dispatch<SetStateAction<Report[]>>;\n  userSettings: UserSettings;\n  setUserSettings: Dispatch<SetStateAction<UserSettings>>;\n  timeRange: number;\n  setTimeRange: Dispatch<SetStateAction<number>>;\n}\n\n// Provide default values for context (empty arrays, defaults for settings)\nconst DataContext = createContext<DataContextType>({\n  globalSettings: null,\n  updateSettings: async () => {}, // Temporary placeholder function\n  reportTypes: [],\n  reports: [],\n  setReports: () => {}, // Temporary placeholder function\n  userSettings: { theme: \"light\" },\n  setUserSettings: () => {}, // Temporary placeholder function\n  timeRange: 4,\n  setTimeRange: () => {}, // Temporary placeholder function\n});\n\n// Properly type the provider component\nexport const DataProvider = ({ children }: { children: ReactNode }) => {\n  const [globalSettings, setGlobalSettings] = useState<GlobalSettings | null>(\n    null\n  );\n  const [reportTypes, setReportTypes] = useState<ReportType[]>([]);\n  const [reports, setReports] = useState<Report[]>([]);\n  const [timeRange, setTimeRange] = useState<number>(4);\n  const [userSettings, setUserSettings] = useState<UserSettings>({\n    theme: \"light\",\n  });\n\n  // Fetch report types once\n  useEffect(() => {\n    async function fetchSettings() {\n      try {\n        const data = await getGlobalSettings();\n        if (!data) {\n          console.error(\"No global settings found\");\n          return;\n        }\n        setGlobalSettings(data);\n      } catch (error) {\n        console.log(\"Error fetching global settings:\", error);\n      }\n    }\n    fetchSettings();\n\n    const fetchReportTypes = async () => {\n      const types = await getReportTypes();\n      setReportTypes(types);\n    };\n    fetchReportTypes();\n\n    const socket = io(\"http://localhost:3005\"); // Adjust to match your socket server URL\n\n    socket.on(\"new-report\", (data: Report) => {\n      setReports((prevReports) => {\n        if (prevReports.some((r) => r.id === data.id)) {\n          return prevReports;\n        }\n\n        return [\n          ...prevReports,\n          {\n            ...data,\n            createdAt:\n              data.createdAt instanceof Date\n                ? data.createdAt.toISOString()\n                : data.createdAt,\n            updatedAt:\n              data.updatedAt instanceof Date\n                ? data.updatedAt.toISOString()\n                : data.updatedAt,\n            departedAt:\n              data.departedAt instanceof Date\n                ? data.departedAt.toISOString()\n                : null,\n          },\n        ];\n      });\n    });\n\n    socket.on(\"report-deleted\", ({ reportId }: { reportId: number }) => {\n      setReports((prevReports) => prevReports.filter((r) => r.id !== reportId));\n    });\n\n    return () => {\n      socket.off(\"new-report\");\n      socket.off(\"report-deleted\");\n    };\n  }, []);\n\n  useEffect(() => {\n    const storedTimeRange = localStorage.getItem(\"timeRange\");\n    if (storedTimeRange) {\n      setTimeRange(Number(storedTimeRange));\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchReports = async () => {\n      try {\n        const serverReports = await getReports(timeRange);\n\n        if (!serverReports || serverReports.length === 0) {\n          console.warn(\"⚠️ No reports found for the given time range.\");\n          setReports([]);\n          return;\n        }\n\n        // Convert Date objects to ISO strings\n        const formattedReports = serverReports.map((report) => ({\n          ...report,\n          createdAt:\n            report.createdAt instanceof Date\n              ? report.createdAt.toISOString()\n              : report.createdAt,\n          updatedAt:\n            report.updatedAt instanceof Date\n              ? report.updatedAt.toISOString()\n              : report.updatedAt,\n          departedAt:\n            report.departedAt instanceof Date\n              ? report.departedAt.toISOString()\n              : null,\n        }));\n\n        setReports(formattedReports);\n      } catch (error) {\n        console.error(\"❌ Error fetching reports:\", error);\n      }\n    };\n    fetchReports();\n\n    const interval = setInterval(fetchReports, 120000); // Fetch reports two minutes\n\n    return () => clearInterval(interval);\n  }, [timeRange]);\n\n  const updateSettings = async (session: any, newSettings: GlobalSettings) => {\n    try {\n      await updateGlobalSettings(session, newSettings);\n      setGlobalSettings(newSettings);\n    } catch (error) {\n      console.error(\"Error updating global settings:\", error);\n    }\n  };\n\n  return (\n    <DataContext.Provider\n      value={{\n        globalSettings,\n        updateSettings,\n        reportTypes,\n        reports,\n        setReports,\n        userSettings,\n        setUserSettings,\n        timeRange,\n        setTimeRange,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n\n// Custom hook for easy data access\nexport const useData = () => useContext(DataContext);\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/socketProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\n\ninterface SocketContextType {\n  socket: Socket | null;\n}\n\ninterface Props {\n  children: React.ReactNode;\n}\nconst SocketContext = createContext<SocketContextType | null>(null);\n\nexport const SocketProvider: React.FC<Props> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n\n  useEffect(() => {\n    // const socketInstance = io(\"http://localhost:3005\");  for different server websocket url\n    const socketInstance = io(\"http://localhost:3005\");\n\n    setSocket(socketInstance);\n\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, []);\n\n  return (\n    <SocketContext.Provider value={{ socket }}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport const useSocket = (): Socket | null => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n  return context.socket;\n};\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAHA;;;;AAYA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA4B;AAEvD,MAAM,iBAAkC,CAAC,EAAE,QAAQ,EAAE;IAC1D,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,0FAA0F;QAC1F,MAAM,iBAAiB,CAAA,GAAA,wLAAA,CAAA,KAAE,AAAD,EAAE;QAE1B,UAAU;QAEV,OAAO;YACL,eAAe,UAAU;QAC3B;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;AAEO,MAAM,YAAY;IACvB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB"}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/components/ui/sonner.tsx"],"sourcesContent":["\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,CAAA,GAAA,gJAAA,CAAA,WAAQ,AAAD;IAEpC,qBACE,8OAAC,wIAAA,CAAA,UAAM;QACL,OAAO;QACP,WAAU;QACV,cAAc;YACZ,YAAY;gBACV,OACE;gBACF,aAAa;gBACb,cACE;gBACF,cACE;YACJ;QACF;QACC,GAAG,KAAK;;;;;;AAGf"}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}