{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReportTypes.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReportTypes() {\n  // Fetch the report types from the database.\n  const types = await db.reportType.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return types.map((type) => ({\n    id: type.id,\n    name: type.name,\n  }));\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReports.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReports() {\n  // Fetch the report types from the database.\n  const reports = await db.report.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return reports;\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/layout/ModeToggle.tsx"],"sourcesContent":["// components/ToggleComponent.tsx\n\"use client\";\n\nimport { useTheme } from \"next-themes\";\n\nconst ModeToggle = () => {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <button\n      onClick={() => (theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\"))}\n      className=\"p-2 border rounded transition\"\n      style={{\n        backgroundColor: theme === \"dark\" ? \"#333\" : \"#fff\",\n        color: theme === \"dark\" ? \"#fff\" : \"#000\",\n      }}\n    >\n      {theme === \"dark\" ? \"üåô Dark Mode\" : \"‚òÄÔ∏è Light Mode\"}\n    </button>\n  );\n};\n\nexport default ModeToggle;\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAGjC;AAFA;;;AAIA,MAAM,aAAa;IACjB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,gJAAA,CAAA,WAAQ,AAAD;IAEnC,qBACE,8OAAC;QACC,SAAS,IAAO,UAAU,SAAS,SAAS,WAAW,SAAS;QAChE,WAAU;QACV,OAAO;YACL,iBAAiB,UAAU,SAAS,SAAS;YAC7C,OAAO,UAAU,SAAS,SAAS;QACrC;kBAEC,UAAU,SAAS,iBAAiB;;;;;;AAG3C;uCAEe"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { Map, Marker, Popup } from \"react-map-gl/maplibre\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport * as turf from \"@turf/turf\";\nimport { getReportTypes } from \"@/actions/getReportTypes\";\nimport { getReports } from \"@/actions/getReports\";\nimport { useSession } from \"./lib/auth-client\";\nimport { motion } from \"motion/react\";\nimport PopupForm from \"./components/map/PopupForm\";\nimport ModeToggle from \"./components/layout/ModeToggle\";\n\nconst socket = io(\"http://localhost:3005\", {\n  reconnection: true,\n  reconnectionAttempts: 10,\n  reconnectionDelay: 2000,\n});\n\nconst GEOFENCE = turf.circle([-74.0122106, 40.7467898], 5, {\n  units: \"miles\",\n});\n\nconst Page = () => {\n  const { data: session, isPending, error } = useSession();\n  const userId = session?.user?.id || \"\";\n  const trustScore = session?.user?.trust;\n  // const [mapCenter, setMapCenter] = useState({\n  //   longitude: process.env.NEXT_PUBLIC_MAP_CENTER_LONG,\n  //   latitude: process.env.NEXT_PUBLIC_MAP_CENTER_LAT,\n  // });\n\n  const [viewState, setViewState] = useState({\n    longitude: -74.0122106,\n    latitude: 40.7467898,\n    zoom: 12,\n  });\n\n  const [showPopup, setShowPopup] = useState(true);\n  const [showFormPopup, setShowFormPopup] = useState(!session);\n  const [reportTypes, setReportTypes] = useState([]);\n  const [reports, setReports] = useState([]);\n  const [newReportId, setNewReportId] = useState(null);\n\n  const getBoundsFromEnv = () => {\n    const sw = process.env.NEXT_PUBLIC_MAP_BOUNDS_SW?.split(\",\").map(Number);\n    const ne = process.env.NEXT_PUBLIC_MAP_BOUNDS_NE?.split(\",\").map(Number);\n\n    if (sw?.length === 2 && ne?.length === 2) {\n      return [\n        [sw[0], sw[1]],\n        [ne[0], ne[1]],\n      ];\n    }\n\n    return undefined;\n  };\n\n  const maxBounds = getBoundsFromEnv();\n\n  // Fetch report types only once on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const types = await getReportTypes();\n        const serverReports = await getReports();\n        setReportTypes(types);\n        setReports(serverReports);\n      } catch (error) {\n        console.error(\"Error fetching report types:\", error);\n      }\n    };\n    fetchData();\n\n    // Listen for real-time updates from WebSockets\n    socket.on(\"new-report\", (data) => {\n      // Extract the report from the WebSocket event\n      const newReport = Array.isArray(data) ? data[1] : data;\n\n      setNewReportId(newReport.id);\n\n      setReports((prevReports) => {\n        if (prevReports.some((r) => r.id === newReport.id)) {\n          return prevReports; // Prevent duplicates\n        }\n        return [...prevReports, { ...newReport }];\n      });\n\n      setTimeout(() => setNewReportId(null), 2000);\n    });\n\n    return () => {\n      socket.off(\"new-report\"); // Clean up on unmount\n    };\n  }, []);\n\n  // Function to determine color based on trust level\n  const getMarkerColor = (trustScore: number) => {\n    if (trustScore >= 4) return \"green\";\n    if (trustScore >= 2) return \"orange\";\n    return \"red\";\n  };\n\n  // Function to determine opacity based on age of report\n  const getMarkerOpacity = (createdAt: string) => {\n    const reportDate = new Date(createdAt);\n    const now = new Date();\n    const hoursElapsed =\n      (now.getTime() - reportDate.getTime()) / (1000 * 60 * 60);\n\n    if (hoursElapsed < 1) return \"1\";\n    if (hoursElapsed < 3) return \"0.8\";\n    if (hoursElapsed < 6) return \"1\";\n    if (hoursElapsed < 12) return \"1\";\n    return \"1\";\n  };\n\n  // Sync marker position with map center\n  // const handleMapMove = (e: any) => {\n  //   setMapCenter({\n  //     longitude: e.viewState.longitude,\n  //     latitude: e.viewState.latitude,\n  //   });\n  // };\n\n  const onMove = useCallback(({ viewState }) => {\n    const newCenter = [viewState.longitude, viewState.latitude];\n    // Only update the view state if the center is inside the geofence\n    if (turf.booleanPointInPolygon(newCenter, GEOFENCE)) {\n      setViewState(newCenter);\n    }\n  }, []);\n\n  const memoizedMarkers = useMemo(\n    () =>\n      reports.map((report) => (\n        <Marker\n          key={report.id}\n          longitude={report.long}\n          latitude={report.lat}\n          color={getMarkerColor(report.trustScore)}\n          opacity={getMarkerOpacity(report.createdAt)}\n          anchor=\"bottom\"\n          // initial={{ opacity: 0, scale: 1.5 }}\n          // animate={{ opacity: 1, scale: 1 }}\n          // transition={{ duration: 2.5 }}\n        />\n      )),\n    [reports]\n  );\n\n  // Make marker draggable rather than centered in map\n  // const handleDragEnd = (e: any) => {\n  //   const { lng, lat } = e.lngLat;\n  //   setLongitude(lng);\n  //   setLatitude(lat);\n  // };\n\n  return (\n    <div className=\"h-[calc(100vh-66px)] w-screen relative\">\n      <div className=\"absolute left-10 top-10 z-10\">\n        <ModeToggle />\n      </div>\n      <Map\n        // initialViewState={{\n        //   longitude: mapCenter.longitude,\n        //   latitude: mapCenter.latitude,\n        //   zoom: 13,\n        // }}\n        // minZoom={process.env.NEXT_PUBLIC_MAP_MIN_ZOOM || 10}\n        // maxZoom={process.env.NEXT_PUBLIC_MAP_MAX_ZOOM || 18}\n        // maxBounds={maxBounds}\n        // onMove={handleMapMove}\n        {...viewState}\n        onMove={onMove}\n        style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}\n        mapStyle={`https://api.maptiler.com/maps/streets/style.json?key=${process.env.NEXT_PUBLIC_MAPTILER_KEY}`}\n      >\n        {memoizedMarkers}\n        {/* {session ? (\n          <>\n            <Marker\n              longitude={mapCenter.longitude}\n              latitude={mapCenter.latitude}\n              anchor=\"bottom\"\n              scale={1}\n              //onDragEnd={handleDragEnd}\n              onClick={() => setShowPopup((prev) => !prev)}\n            />\n            {showPopup && (\n              <Popup\n                longitude={mapCenter.longitude}\n                latitude={mapCenter.latitude}\n                closeButton={true}\n                closeOnClick={false}\n                onClose={() => setShowPopup(false)}\n                anchor=\"bottom\"\n                offset={60}\n              >\n                {reportTypes.length > 0 ? (\n                  <PopupForm\n                    latitude={mapCenter.latitude}\n                    longitude={mapCenter.longitude}\n                    reportTypes={reportTypes}\n                    userId={userId}\n                    trustScore={trustScore}\n                    onSubmit={(payload) => {\n                      // Your submission handling here.\n                      console.log(\"Payload submitted:\", payload);\n                      setShowPopup(false);\n                    }}\n                    onClose={() => setShowPopup(false)}\n                  />\n                ) : (\n                  <p>Loading...</p>\n                )}\n              </Popup>\n            )}\n          </>\n        ) : (\n          <>\n            {showFormPopup && (\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-4 rounded-sm shadow-sm\">\n                <button\n                  onClick={() => setShowFormPopup(false)}\n                  className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-800\"\n                >\n                  ‚úï\n                </button>\n                <p className=\"text-black\">\n                  Please sign in to interact with the map.\n                </p>\n              </div>\n            )}\n          </>\n        )} */}\n      </Map>\n    </div>\n  );\n};\n\nexport default Page;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}