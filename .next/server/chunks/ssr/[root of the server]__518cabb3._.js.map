{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst db = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default db;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = db;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAMA,MAAM,KAAK,WAAW,YAAY,IAAI;uCAEvB;AAEf,wCAA2C,WAAW,YAAY,GAAG","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/globalSettings.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\n\n// Fetch Global Settings\nexport async function getGlobalSettings() {\n  const settings = await db.globalSettings.findFirst();\n  return settings;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAGO,eAAe,uCAAe,GAAf;IACpB,MAAM,WAAW,MAAM,kGAAA,CAAA,UAAE,CAAC,cAAc,CAAC,SAAS;IAClD,OAAO;AACT;;;IAHsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/lib/requireRole.ts"],"sourcesContent":["import type { Session } from \"@/app/lib/auth-client\";\n\nexport const requireRole = (\n  session: Session,\n  requiredRole: \"user\" | \"moderator\" | \"admin\"\n) => {\n  console.log(\"Session in requireRole:\", session);\n  if (\n    !session ||\n    typeof session !== \"object\" ||\n    !(\"user\" in session) ||\n    !session.user\n  ) {\n    throw new Error(\"User is not authenticated\");\n  }\n\n  const rolesHierarchy = { user: 1, moderator: 2, admin: 3 };\n\n  if (rolesHierarchy[session.user.role] < rolesHierarchy[requiredRole]) {\n    throw new Error(`User does not have the required role: ${requiredRole}`);\n  }\n};\n"],"names":[],"mappings":";;;AAEO,MAAM,cAAc,CACzB,SACA;IAEA,QAAQ,GAAG,CAAC,2BAA2B;IACvC,IACE,CAAC,WACD,OAAO,YAAY,YACnB,CAAC,CAAC,UAAU,OAAO,KACnB,CAAC,QAAQ,IAAI,EACb;QACA,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,iBAAiB;QAAE,MAAM;QAAG,WAAW;QAAG,OAAO;IAAE;IAEzD,IAAI,cAAc,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,aAAa,EAAE;QACpE,MAAM,IAAI,MAAM,CAAC,sCAAsC,EAAE,cAAc;IACzE;AACF","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/adminActions.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\nimport { requireRole } from \"@/app/lib/requireRole\";\nimport type { Session } from \"@/app/lib/auth-client\";\n\n// Update Global Settings\nexport async function updateGlobalSettings(session: Session, updatedSettings) {\n  requireRole(session, \"admin\");\n\n  const { id, ...settingWithoutId } = updatedSettings;\n\n  return await db.globalSettings.update({\n    where: { id: 1 },\n    data: settingWithoutId,\n  });\n}\n\n// Fetch all users for admin panel user table\nexport async function fetchUsers(session: Session) {\n  requireRole(session, \"admin\");\n\n  const users = await db.user.findMany({\n    select: {\n      id: true,\n      username: true,\n      email: true,\n      createdAt: true,\n      role: true,\n    },\n  });\n\n  // Format createdAt to \"hh:mm MM/DD/YYYY\"\n  const formattedUsers = users.map((user) => ({\n    ...user,\n    role: user.role.charAt(0).toUpperCase() + user.role.slice(1),\n    createdAt: user.createdAt.toLocaleString(\"en-US\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      year: \"numeric\",\n      hour12: false,\n    }),\n  }));\n\n  return formattedUsers;\n}\n\n// Update user role in admin panel\nexport async function updateUserRole(\n  adminSession: Session,\n  userId: string,\n  newRole: \"user\" | \"moderator\" | \"admin\"\n) {\n  try {\n    requireRole(adminSession, \"admin\"); // Restrict to admins only\n\n    await db.user.update({\n      where: { id: userId },\n      data: { role: newRole },\n    });\n\n    return { success: true };\n  } catch (error) {\n    return { error: error };\n  }\n}\n\n// Delete user in admin panel\nexport async function deleteUser(adminSession: Session, userId: string) {\n  try {\n    requireRole(adminSession, \"admin\"); // Restrict to admins only\n\n    await db.user.delete({ where: { id: userId } });\n\n    return { success: true };\n  } catch (error) {\n    return { error: error };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;;;;;;AAIO,eAAe,uCAAkB,GAAlB,qBAAqB,OAAgB,EAAE,eAAe;IAC1E,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,SAAS;IAErB,MAAM,EAAE,EAAE,EAAE,GAAG,kBAAkB,GAAG;IAEpC,OAAO,MAAM,kGAAA,CAAA,UAAE,CAAC,cAAc,CAAC,MAAM,CAAC;QACpC,OAAO;YAAE,IAAI;QAAE;QACf,MAAM;IACR;AACF;AAGO,eAAe,uCAAQ,GAAR,WAAW,OAAgB;IAC/C,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,SAAS;IAErB,MAAM,QAAQ,MAAM,kGAAA,CAAA,UAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QACnC,QAAQ;YACN,IAAI;YACJ,UAAU;YACV,OAAO;YACP,WAAW;YACX,MAAM;QACR;IACF;IAEA,yCAAyC;IACzC,MAAM,iBAAiB,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1C,GAAG,IAAI;YACP,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG,WAAW,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;YAC1D,WAAW,KAAK,SAAS,CAAC,cAAc,CAAC,SAAS;gBAChD,MAAM;gBACN,QAAQ;gBACR,OAAO;gBACP,KAAK;gBACL,MAAM;gBACN,QAAQ;YACV;QACF,CAAC;IAED,OAAO;AACT;AAGO,eAAe,uCAAY,GAAZ,eACpB,YAAqB,EACrB,MAAc,EACd,OAAuC;IAEvC,IAAI;QACF,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,cAAc,UAAU,0BAA0B;QAE9D,MAAM,kGAAA,CAAA,UAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnB,OAAO;gBAAE,IAAI;YAAO;YACpB,MAAM;gBAAE,MAAM;YAAQ;QACxB;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,OAAO;QAAM;IACxB;AACF;AAGO,eAAe,uCAAQ,GAAR,WAAW,YAAqB,EAAE,MAAc;IACpE,IAAI;QACF,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,cAAc,UAAU,0BAA0B;QAE9D,MAAM,kGAAA,CAAA,UAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE,IAAI;YAAO;QAAE;QAE7C,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,OAAO;QAAM;IACxB;AACF;;;IAzEsB;IAYA;IA+BA;IAoBA;;AA/DA,+OAAA;AAYA,+OAAA;AA+BA,+OAAA;AAoBA,+OAAA","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReportTypes.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReportTypes() {\n  // Fetch the report types from the database.\n  const types = await db.reportType.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return types.map((type) => ({\n    id: type.id,\n    name: type.name,\n    fields: type.fields,\n  }));\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAY,GAAZ;IACpB,4CAA4C;IAC5C,MAAM,QAAQ,MAAM,kGAAA,CAAA,UAAE,CAAC,UAAU,CAAC,QAAQ;IAC1C,0DAA0D;IAC1D,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,IAAI,KAAK,EAAE;YACX,MAAM,KAAK,IAAI;YACf,QAAQ,KAAK,MAAM;QACrB,CAAC;AACH;;;IATsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReports.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReports(timeRange: number = 4) {\n  const cutoffTime = new Date();\n  cutoffTime.setHours(cutoffTime.getHours() - timeRange);\n\n  // Fetch the report types from the database.\n  const reports = await db.report.findMany({\n    where: {\n      createdAt: {\n        gte: cutoffTime,\n      },\n    },\n    orderBy: {\n      createdAt: \"desc\",\n    },\n    include: {\n      votes: {\n        where: { value: 1 },\n        orderBy: { createdAt: \"desc\" },\n        take: 1,\n      },\n    },\n  });\n  // Map the result to a simpler array of objects if needed.\n  return reports.map((report) => ({\n    ...report,\n    lastSighting: report.votes.length > 0 ? report.votes[0].createdAt : null, // Use latest vote timestamp\n  }));\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAQ,GAAR,WAAW,YAAoB,CAAC;IACpD,MAAM,aAAa,IAAI;IACvB,WAAW,QAAQ,CAAC,WAAW,QAAQ,KAAK;IAE5C,4CAA4C;IAC5C,MAAM,UAAU,MAAM,kGAAA,CAAA,UAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;QACvC,OAAO;YACL,WAAW;gBACT,KAAK;YACP;QACF;QACA,SAAS;YACP,WAAW;QACb;QACA,SAAS;YACP,OAAO;gBACL,OAAO;oBAAE,OAAO;gBAAE;gBAClB,SAAS;oBAAE,WAAW;gBAAO;gBAC7B,MAAM;YACR;QACF;IACF;IACA,0DAA0D;IAC1D,OAAO,QAAQ,GAAG,CAAC,CAAC,SAAW,CAAC;YAC9B,GAAG,MAAM;YACT,cAAc,OAAO,KAAK,CAAC,MAAM,GAAG,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC,SAAS,GAAG;QACtE,CAAC;AACH;;;IA3BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/postReport.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\nimport { Prisma } from \"@prisma/client\";\n\ninterface ReportPayload {\n  latitude: number;\n  longitude: number;\n  reportTypeId: number;\n  trustScore: number;\n  userId: string;\n  description?: Record<string, string>;\n}\n\nexport async function postReport(payload: ReportPayload) {\n  try {\n    const {\n      latitude,\n      longitude,\n      reportTypeId,\n      trustScore,\n      userId,\n      description = {},\n    } = payload;\n\n    const image = null;\n\n    const report = await db.report.create({\n      data: {\n        lat: latitude,\n        long: longitude,\n        description: Object.keys(description).length\n          ? (description as Prisma.JsonObject)\n          : Prisma.JsonNull,\n        image: image ?? null,\n        trustScore,\n        submittedById: userId || null,\n        reportTypeId,\n      },\n    });\n\n    console.log(\"Report posted:\", report);\n\n    // Emit new report event via WebSocket\n    await fetch(\"http://localhost:3005/api/new-report\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(report),\n    });\n\n    return report;\n  } catch (error) {\n    console.error(\"Error posting report\", error);\n    return { error: \"Failed to post report\" };\n  }\n}\n\nexport async function handleDeletedUser(userId: string) {\n  try {\n    await db.report.updateMany({\n      where: { submittedById: userId },\n      data: { deletedUserId: userId },\n    });\n  } catch (error) {\n    console.error(\"Error deleting user\", error);\n    return { error: \"Failed to delete user\" };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAWO,eAAe,uCAAQ,GAAR,WAAW,OAAsB;IACrD,IAAI;QACF,MAAM,EACJ,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,UAAU,EACV,MAAM,EACN,cAAc,CAAC,CAAC,EACjB,GAAG;QAEJ,MAAM,QAAQ;QAEd,MAAM,SAAS,MAAM,kGAAA,CAAA,UAAE,CAAC,MAAM,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,KAAK;gBACL,MAAM;gBACN,aAAa,OAAO,IAAI,CAAC,aAAa,MAAM,GACvC,cACD,6HAAA,CAAA,SAAM,CAAC,QAAQ;gBACnB,OAAO,SAAS;gBAChB;gBACA,eAAe,UAAU;gBACzB;YACF;QACF;QAEA,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,sCAAsC;QACtC,MAAM,MAAM,wCAAwC;YAClD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO;YAAE,OAAO;QAAwB;IAC1C;AACF;AAEO,eAAe,uCAAe,GAAf,kBAAkB,MAAc;IACpD,IAAI;QACF,MAAM,kGAAA,CAAA,UAAE,CAAC,MAAM,CAAC,UAAU,CAAC;YACzB,OAAO;gBAAE,eAAe;YAAO;YAC/B,MAAM;gBAAE,eAAe;YAAO;QAChC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;YAAE,OAAO;QAAwB;IAC1C;AACF;;;IAvDsB;IA6CA;;AA7CA,+OAAA;AA6CA,+OAAA","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/validateInvite.ts"],"sourcesContent":["\"use server\";\nimport db from \"@/db\"; // Adjust path based on your project structure\nimport { error } from \"console\";\n\nexport async function validateInvite(inviteCode: string) {\n  try {\n    if (!inviteCode) return error(\"Invite code is required\");\n\n    // Check if the invite code exists in the database\n    const invite = await db.inviteCode.findUnique({\n      where: { code: inviteCode, isUsed: false },\n    });\n\n    if (!invite) {\n      return \"Invalid or previously used invite code\";\n    }\n\n    // If the code is valid, return success\n    await db.inviteCode.update({\n      where: { code: inviteCode },\n      data: { isUsed: true },\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Error validating invite code:\", error);\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;;;AACA,4KAAuB,8CAA8C;AACrE;;;;;;AAEO,eAAe,uCAAY,GAAZ,eAAe,UAAkB;IACrD,IAAI;QACF,IAAI,CAAC,YAAY,OAAO,CAAA,GAAA,uGAAA,CAAA,QAAK,AAAD,EAAE;QAE9B,kDAAkD;QAClD,MAAM,SAAS,MAAM,kGAAA,CAAA,UAAE,CAAC,UAAU,CAAC,UAAU,CAAC;YAC5C,OAAO;gBAAE,MAAM;gBAAY,QAAQ;YAAM;QAC3C;QAEA,IAAI,CAAC,QAAQ;YACX,OAAO;QACT;QAEA,uCAAuC;QACvC,MAAM,kGAAA,CAAA,UAAE,CAAC,UAAU,CAAC,MAAM,CAAC;YACzB,OAAO;gBAAE,MAAM;YAAW;YAC1B,MAAM;gBAAE,QAAQ;YAAK;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF;;;IAvBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}