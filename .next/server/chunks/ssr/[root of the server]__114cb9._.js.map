{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst db = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default db;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = db;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAMA,MAAM,KAAK,WAAW,YAAY,IAAI;uCAEvB;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/globalSettings.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\n\n// Fetch Global Settings\nexport async function getGlobalSettings() {\n  const settings = await db.globalSettings.findFirst();\n  return settings;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAGO,eAAe,uCAAe,GAAf;IACpB,MAAM,WAAW,MAAM,kGAAA,CAAA,UAAE,CAAC,cAAc,CAAC,SAAS;IAClD,OAAO;AACT;;;IAHsB;;AAAA,+OAAA"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/lib/requireRole.ts"],"sourcesContent":["import type { Session } from \"@/app/lib/auth-client\";\n\nexport const requireRole = (\n  session: Session,\n  requiredRole: \"user\" | \"moderator\" | \"admin\"\n) => {\n  if (!session || !session.user) {\n    throw new Error(\"User is not authenticated\");\n  }\n\n  const rolesHierarchy = { user: 1, moderator: 2, admin: 3 };\n\n  if (rolesHierarchy[session.user.role] < rolesHierarchy[requiredRole]) {\n    throw new Error(`User does not have the required role: ${requiredRole}`);\n  }\n};\n"],"names":[],"mappings":";;;AAEO,MAAM,cAAc,CACzB,SACA;IAEA,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;QAC7B,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,iBAAiB;QAAE,MAAM;QAAG,WAAW;QAAG,OAAO;IAAE;IAEzD,IAAI,cAAc,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,aAAa,EAAE;QACpE,MAAM,IAAI,MAAM,CAAC,sCAAsC,EAAE,cAAc;IACzE;AACF"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/adminActions.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\nimport { requireRole } from \"@/app/lib/requireRole\";\nimport type { Session } from \"@/app/lib/auth-client\";\n\n// âœ… Update Global Settings (Admins only)\nexport async function updateGlobalSettings(session: Session, updatedSettings) {\n  requireRole(session, \"admin\");\n\n  const { id, ...settingWithoutId } = updatedSettings;\n\n  return await db.globalSettings.update({\n    where: { id: 1 },\n    data: settingWithoutId,\n  });\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAIO,eAAe,uCAAkB,GAAlB,qBAAqB,OAAgB,EAAE,eAAe;IAC1E,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE,SAAS;IAErB,MAAM,EAAE,EAAE,EAAE,GAAG,kBAAkB,GAAG;IAEpC,OAAO,MAAM,kGAAA,CAAA,UAAE,CAAC,cAAc,CAAC,MAAM,CAAC;QACpC,OAAO;YAAE,IAAI;QAAE;QACf,MAAM;IACR;AACF;;;IATsB;;AAAA,+OAAA"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReports.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReports(timeRange: number = 4) {\n  const cutoffTime = new Date();\n  cutoffTime.setHours(cutoffTime.getHours() - timeRange);\n\n  // Fetch the report types from the database.\n  const reports = await db.report.findMany({\n    where: {\n      createdAt: {\n        gte: cutoffTime,\n      },\n    },\n    orderBy: {\n      createdAt: \"desc\",\n    },\n  });\n  // Map the result to a simpler array of objects if needed.\n  return reports;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAQ,GAAR,WAAW,YAAoB,CAAC;IACpD,MAAM,aAAa,IAAI;IACvB,WAAW,QAAQ,CAAC,WAAW,QAAQ,KAAK;IAE5C,4CAA4C;IAC5C,MAAM,UAAU,MAAM,kGAAA,CAAA,UAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;QACvC,OAAO;YACL,WAAW;gBACT,KAAK;YACP;QACF;QACA,SAAS;YACP,WAAW;QACb;IACF;IACA,0DAA0D;IAC1D,OAAO;AACT;;;IAjBsB;;AAAA,+OAAA"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReportTypes.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReportTypes() {\n  // Fetch the report types from the database.\n  const types = await db.reportType.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return types.map((type) => ({\n    id: type.id,\n    name: type.name,\n    fields: type.fields,\n  }));\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAY,GAAZ;IACpB,4CAA4C;IAC5C,MAAM,QAAQ,MAAM,kGAAA,CAAA,UAAE,CAAC,UAAU,CAAC,QAAQ;IAC1C,0DAA0D;IAC1D,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,IAAI,KAAK,EAAE;YACX,MAAM,KAAK,IAAI;YACf,QAAQ,KAAK,MAAM;QACrB,CAAC;AACH;;;IATsB;;AAAA,+OAAA"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}