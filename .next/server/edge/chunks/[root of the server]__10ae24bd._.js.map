{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["//Use this file to define which routes should be protected by authentication.\n//You can make the entire site protected by adding the root of the project (\"/\") to the matcher below.\n\nimport { betterFetch } from \"@better-fetch/fetch\";\nimport type { auth } from \"./app/lib/auth\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\ntype Session = typeof auth.$Infer.Session;\n\nexport default async function authMiddleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n\n  const { data: session } = await betterFetch<Session>(\n    \"/api/auth/get-session\",\n    {\n      baseURL: request.nextUrl.origin,\n      headers: {\n        //get the cookie from the request\n        cookie: request.headers.get(\"cookie\") || \"\",\n      },\n    }\n  );\n\n  const res = await fetch(`${request.nextUrl.origin}/api/global-settings`, {\n    method: \"GET\",\n    headers: {\n      \"Cache-Control\": \"no-store\",\n    },\n  });\n\n  if (!res.ok) {\n    console.error(\"Failed to fetch global settings\");\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n\n  let globalSettings;\n  try {\n    globalSettings = await res.json();\n  } catch (error) {\n    console.error(\"Error parsing JSON:\", error);\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n\n  //Protect site based on settings\n  if (globalSettings.mapOpenToVisitors === false && !session) {\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n\n  if (\n    request.nextUrl.pathname === \"/signup\" &&\n    globalSettings.registrationMode === \"invite-only\"\n  ) {\n    const inviteCode = request.nextUrl.searchParams.get(\"invite\");\n    if (!inviteCode) {\n      return NextResponse.redirect(new URL(\"/\", request.url));\n    }\n  }\n\n  //Role-based access control\n  const isAdmin = session?.user?.role === \"admin\";\n  const isModerator = session?.user?.role === \"moderator\";\n\n  if (pathname.startsWith(\"/admin\") && !isAdmin) {\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  if (pathname.startsWith(\"/moderator\") && !(isAdmin || isModerator)) {\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  return NextResponse.next();\n}\n\n//The matcher array below will protect the dashboard and test routes.\nexport const config = {\n  matcher: [\"/\", \"/admin/:path*\", \"/moderator/:path*\"],\n};\n"],"names":[],"mappings":"AAAA,6EAA6E;AAC7E,sGAAsG;;;;;AAEtG;AAEA;AAAA;;;AAIe,eAAe,eAAe,OAAoB;IAC/D,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,mKAAA,CAAA,cAAW,AAAD,EACxC,yBACA;QACE,SAAS,QAAQ,OAAO,CAAC,MAAM;QAC/B,SAAS;YACP,iCAAiC;YACjC,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;QAC3C;IACF;IAGF,MAAM,MAAM,MAAM,MAAM,GAAG,QAAQ,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE;QACvE,QAAQ;QACR,SAAS;YACP,iBAAiB;QACnB;IACF;IAEA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,QAAQ,KAAK,CAAC;QACd,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;IAC9D;IAEA,IAAI;IACJ,IAAI;QACF,iBAAiB,MAAM,IAAI,IAAI;IACjC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;IAC9D;IAEA,gCAAgC;IAChC,IAAI,eAAe,iBAAiB,KAAK,SAAS,CAAC,SAAS;QAC1D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;IAC9D;IAEA,IACE,QAAQ,OAAO,CAAC,QAAQ,KAAK,aAC7B,eAAe,gBAAgB,KAAK,eACpC;QACA,MAAM,aAAa,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;QACpD,IAAI,CAAC,YAAY;YACf,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;IACF;IAEA,2BAA2B;IAC3B,MAAM,UAAU,SAAS,MAAM,SAAS;IACxC,MAAM,cAAc,SAAS,MAAM,SAAS;IAE5C,IAAI,SAAS,UAAU,CAAC,aAAa,CAAC,SAAS;QAC7C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,IAAI,SAAS,UAAU,CAAC,iBAAiB,CAAC,CAAC,WAAW,WAAW,GAAG;QAClE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAK;QAAiB;KAAoB;AACtD"}}]
}