{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst db = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default db;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = db;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6IAAA,CAAA,eAAY;AACzB;AAMA,MAAM,KAAK,WAAW,YAAY,IAAI;uCAEvB;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/actions/globalSettings.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"@/db\";\n\n// Fetch Global Settings\nexport async function getGlobalSettings() {\n  const settings = await db.globalSettings.findFirst();\n  return settings;\n}\n"],"names":[],"mappings":";;;AAEA;AAFA;;AAKO,eAAe;IACpB,MAAM,WAAW,MAAM,kGAAA,CAAA,UAAE,CAAC,cAAc,CAAC,SAAS;IAClD,OAAO;AACT"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["//Use this file to define which routes should be protected by authentication.\n//You can make the entire site protected by adding the root of the project (\"/\") to the matcher below.\n\nimport { betterFetch } from \"@better-fetch/fetch\";\nimport type { auth } from \"./app/lib/auth\";\nimport { getGlobalSettings } from \"./actions/globalSettings\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\ntype Session = typeof auth.$Infer.Session;\n\nexport default async function authMiddleware(request: NextRequest) {\n  const { data: session } = await betterFetch<Session>(\n    \"/api/auth/get-session\",\n    {\n      baseURL: request.nextUrl.origin,\n      headers: {\n        //get the cookie from the request\n        cookie: request.headers.get(\"cookie\") || \"\",\n      },\n    }\n  );\n\n  const globalSettings = await getGlobalSettings();\n\n  if (globalSettings?.mapOpenToVisitors === false && !session) {\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n\n  const { pathname } = request.nextUrl;\n\n  //if there is no session, redirect to the sign-in page.\n  if (!session) {\n    return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n  }\n\n  const isAdmin = session.user.role === \"admin\";\n  const isModerator = session.user.role === \"moderator\";\n\n  if (pathname.startsWith(\"/admin\") && !isAdmin) {\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  if (pathname.startsWith(\"/moderator\") && !(isAdmin || isModerator)) {\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  return NextResponse.next();\n}\n\n//The matcher array below will protect the dashboard and test routes.\nexport const config = {\n  matcher: [\"/\", \"/admin/:path*\", \"/moderator/:path*\"],\n};\n"],"names":[],"mappings":"AAAA,6EAA6E;AAC7E,sGAAsG;;;;;AAEtG;AAEA;AACA;AAAA;;;;AAIe,eAAe,eAAe,OAAoB;IAC/D,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EACxC,yBACA;QACE,SAAS,QAAQ,OAAO,CAAC,MAAM;QAC/B,SAAS;YACP,iCAAiC;YACjC,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;QAC3C;IACF;IAGF,MAAM,iBAAiB,MAAM,CAAA,GAAA,yHAAA,CAAA,oBAAiB,AAAD;IAE7C,IAAI,gBAAgB,sBAAsB,SAAS,CAAC,SAAS;QAC3D,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;IAC9D;IAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,uDAAuD;IACvD,IAAI,CAAC,SAAS;QACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;IAC9D;IAEA,MAAM,UAAU,QAAQ,IAAI,CAAC,IAAI,KAAK;IACtC,MAAM,cAAc,QAAQ,IAAI,CAAC,IAAI,KAAK;IAE1C,IAAI,SAAS,UAAU,CAAC,aAAa,CAAC,SAAS;QAC7C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,IAAI,SAAS,UAAU,CAAC,iBAAiB,CAAC,CAAC,WAAW,WAAW,GAAG;QAClE,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAK;QAAiB;KAAoB;AACtD"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}