{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReportTypes.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReportTypes() {\n  // Fetch the report types from the database.\n  const types = await db.reportType.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return types.map((type) => ({\n    id: type.id,\n    name: type.name,\n  }));\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/getReports.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function getReports() {\n  // Fetch the report types from the database.\n  const reports = await db.report.findMany();\n  // Map the result to a simpler array of objects if needed.\n  return reports;\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/actions/postReport.ts"],"sourcesContent":["\"use server\";\n\nimport db from \"../db\";\n\nexport async function postReport(\n  latitude: number,\n  longitude: number,\n  reportTypeId: number,\n  trustScore: number,\n  userId: string,\n  description: string | null\n  // image: string | null\n) {\n  try {\n    const report = await db.report.create({\n      data: {\n        lat: latitude,\n        long: longitude,\n        description: description ?? null,\n        //  image: image ?? null,\n        reportTypeId,\n        trustScore,\n        submittedById: userId,\n      },\n    });\n\n    await fetch(\"http://localhost:3005/api/new-report\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(report),\n    });\n\n    return report;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":[],"mappings":";;;;;IAIsB"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/map/PopupForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { authClient } from \"@/app/lib/auth-client\";\nimport { postReport } from \"@/actions/postReport\";\n\ninterface ReportType {\n  id: number;\n  name: string;\n}\n\ninterface PopupFormProps {\n  latitude: number;\n  longitude: number;\n  reportTypes: ReportType[];\n  userId: string;\n  trustScore: number;\n  onClose: () => void;\n}\n\nconst PopupForm = ({\n  latitude,\n  longitude,\n  reportTypes,\n  userId,\n  trustScore,\n  onClose,\n}: PopupFormProps) => {\n  const [selectedReportType, setSelectedReportType] = useState<number>(\n    reportTypes.length > 0\n      ? [...reportTypes].sort((a, b) => a.id - b.id)[0].id\n      : 0\n  );\n  const [description, setDescription] = useState(\"\");\n\n  const session = authClient.useSession();\n  console.log(session);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!selectedReportType) {\n      return;\n    }\n\n    const payload = {\n      latitude, // Current latitude\n      longitude, // Current longitude\n      reportTypeId: selectedReportType, // Admin can change these options\n      trustScore,\n      userId,\n      description, // Optional description\n      // Additional fields (like initial trustScore) can be set server-side.\n    };\n\n    postReport(\n      latitude,\n      longitude,\n      selectedReportType,\n      trustScore,\n      userId,\n      description\n    );\n    // Optionally clear the form if desired:\n    setDescription(\"\");\n  };\n\n  return (\n    <div className=\"\">\n      <form onSubmit={handleSubmit} className=\"p-2\">\n        <div>\n          <label htmlFor=\"reportType\" className=\"block font-bold\">\n            Report Type:\n          </label>\n          <select\n            id=\"reportType\"\n            value={selectedReportType}\n            onChange={(e) => setSelectedReportType(Number(e.target.value))}\n            required\n            className=\"border rounded-sm p-1 w-full\"\n          >\n            {reportTypes\n              .slice()\n              .sort((a, b) => a.id - b.id)\n              .map((type) => (\n                <option key={type.id} value={type.id}>\n                  {type.name}\n                </option>\n              ))}\n          </select>\n        </div>\n        <div className=\"mt-2\">\n          <label htmlFor=\"description\" className=\"block font-bold\">\n            Description:\n          </label>\n          <textarea\n            id=\"description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"border rounded-sm p-1 w-full\"\n          />\n        </div>\n        <div className=\"mt-2\">\n          <p>\n            <strong>Latitude:</strong> {latitude}\n          </p>\n          <p>\n            <strong>Longitude:</strong> {longitude}\n          </p>\n        </div>\n        <div className=\"mt-2 flex space-x-2\">\n          <button\n            type=\"submit\"\n            className=\"bg-blue-500 text-white px-3 py-1 rounded-sm\"\n          >\n            Submit Report\n          </button>\n          <button\n            type=\"button\"\n            className=\"bg-gray-500 text-white px-3 py-1 rounded-sm\"\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PopupForm;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAoBA,MAAM,YAAY,CAAC,EACjB,QAAQ,EACR,SAAS,EACT,WAAW,EACX,MAAM,EACN,UAAU,EACV,OAAO,EACQ;;IACf,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EACzD,YAAY,MAAM,GAAG,IACjB;WAAI;KAAY,CAAC,IAAI;8BAAC,CAAC,GAAG,IAAM,EAAE,EAAE,GAAG,EAAE,EAAE;4BAAC,CAAC,EAAE,CAAC,EAAE,GAClD;IAEN,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,UAAU,+HAAA,CAAA,aAAU,CAAC,UAAU;IACrC,QAAQ,GAAG,CAAC;IAEZ,MAAM,eAAe,CAAC;QACpB,EAAE,cAAc;QAChB,IAAI,CAAC,oBAAoB;YACvB;QACF;QAEA,MAAM,UAAU;YACd;YACA;YACA,cAAc;YACd;YACA;YACA;QAEF;QAEA,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD,EACP,UACA,WACA,oBACA,YACA,QACA;QAEF,wCAAwC;QACxC,eAAe;IACjB;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAK,UAAU;YAAc,WAAU;;8BACtC,6LAAC;;sCACC,6LAAC;4BAAM,SAAQ;4BAAa,WAAU;sCAAkB;;;;;;sCAGxD,6LAAC;4BACC,IAAG;4BACH,OAAO;4BACP,UAAU,CAAC,IAAM,sBAAsB,OAAO,EAAE,MAAM,CAAC,KAAK;4BAC5D,QAAQ;4BACR,WAAU;sCAET,YACE,KAAK,GACL,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAC1B,GAAG,CAAC,CAAC,qBACJ,6LAAC;oCAAqB,OAAO,KAAK,EAAE;8CACjC,KAAK,IAAI;mCADC,KAAK,EAAE;;;;;;;;;;;;;;;;8BAM5B,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAQ;4BAAc,WAAU;sCAAkB;;;;;;sCAGzD,6LAAC;4BACC,IAAG;4BACH,OAAO;4BACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;4BAC9C,WAAU;;;;;;;;;;;;8BAGd,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;;8CACC,6LAAC;8CAAO;;;;;;gCAAkB;gCAAE;;;;;;;sCAE9B,6LAAC;;8CACC,6LAAC;8CAAO;;;;;;gCAAmB;gCAAE;;;;;;;;;;;;;8BAGjC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BACC,MAAK;4BACL,WAAU;sCACX;;;;;;sCAGD,6LAAC;4BACC,MAAK;4BACL,WAAU;4BACV,SAAS;sCACV;;;;;;;;;;;;;;;;;;;;;;;AAOX;GA3GM;;QAeY,+HAAA,CAAA,aAAU,CAAC;;;KAfvB;uCA6GS"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/components/layout/ModeToggle.tsx"],"sourcesContent":["// components/ToggleComponent.tsx\n\"use client\";\n\nimport { useTheme } from \"next-themes\";\n\nconst ModeToggle = () => {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <button\n      onClick={() => (theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\"))}\n      className=\"p-2 border rounded transition\"\n      style={{\n        backgroundColor: theme === \"dark\" ? \"#333\" : \"#fff\",\n        color: theme === \"dark\" ? \"#fff\" : \"#000\",\n      }}\n    >\n      {theme === \"dark\" ? \"üåô Dark Mode\" : \"‚òÄÔ∏è Light Mode\"}\n    </button>\n  );\n};\n\nexport default ModeToggle;\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAGjC;;;AAFA;;AAIA,MAAM,aAAa;;IACjB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD;IAEnC,qBACE,6LAAC;QACC,SAAS,IAAO,UAAU,SAAS,SAAS,WAAW,SAAS;QAChE,WAAU;QACV,OAAO;YACL,iBAAiB,UAAU,SAAS,SAAS;YAC7C,OAAO,UAAU,SAAS,SAAS;QACrC;kBAEC,UAAU,SAAS,iBAAiB;;;;;;AAG3C;GAfM;;QACwB,mJAAA,CAAA,WAAQ;;;KADhC;uCAiBS"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///Users/Nathan/Library/CloudStorage/Dropbox/Tech/projects/mapapp/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { Map, Marker, Popup } from \"react-map-gl/maplibre\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport { getReportTypes } from \"@/actions/getReportTypes\";\nimport { getReports } from \"@/actions/getReports\";\nimport { useSession } from \"./lib/auth-client\";\nimport { motion } from \"motion/react\";\nimport PopupForm from \"./components/map/PopupForm\";\nimport ModeToggle from \"./components/layout/ModeToggle\";\n\nconst MotionMarker = motion(Marker);\n\nconst socket = io(\"http://localhost:3005\", {\n  reconnection: true,\n  reconnectionAttempts: 10,\n  reconnectionDelay: 2000,\n});\n\nconst Page = () => {\n  const { data: session, isPending, error } = useSession();\n  const userId = session?.user?.id || \"\";\n  const trustScore = session?.user?.trust;\n\n  //const [longitude, setLongitude] = useState(-73.9922);\n  //const [latitude, setLatitude] = useState(40.7785);\n  const [mapCenter, setMapCenter] = useState({\n    longitude: -73.9755,\n    latitude: 40.7655,\n  });\n  const [showPopup, setShowPopup] = useState(true);\n  const [showFormPopup, setShowFormPopup] = useState(!session);\n  const [reportTypes, setReportTypes] = useState([]);\n  const [reports, setReports] = useState([]);\n  const [newReportId, setNewReportId] = useState(null);\n\n  // Fetch report types only once on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const types = await getReportTypes();\n        const serverReports = await getReports();\n        setReportTypes(types);\n        setReports(serverReports);\n      } catch (error) {\n        console.error(\"Error fetching report types:\", error);\n      }\n    };\n    fetchData();\n\n    // Listen for real-time updates from WebSockets\n    socket.on(\"new-report\", (data) => {\n      // Extract the report from the WebSocket event\n      const newReport = Array.isArray(data) ? data[1] : data;\n\n      setNewReportId(newReport.id);\n\n      setReports((prevReports) => {\n        if (prevReports.some((r) => r.id === newReport.id)) {\n          return prevReports; // Prevent duplicates\n        }\n        return [...prevReports, { ...newReport }];\n      });\n\n      setTimeout(() => setNewReportId(null), 2000);\n    });\n\n    return () => {\n      socket.off(\"new-report\"); // Clean up on unmount\n    };\n  }, []);\n\n  // Function to determine color based on trust level\n  const getMarkerColor = (trustScore: number) => {\n    if (trustScore >= 4) return \"green\";\n    if (trustScore >= 2) return \"orange\";\n    return \"red\";\n  };\n\n  // Function to determine opacity based on age of report\n  const getMarkerOpacity = (createdAt: string) => {\n    const reportDate = new Date(createdAt);\n    const now = new Date();\n    const hoursElapsed =\n      (now.getTime() - reportDate.getTime()) / (1000 * 60 * 60);\n\n    if (hoursElapsed < 1) return \"1\";\n    if (hoursElapsed < 3) return \"0.8\";\n    if (hoursElapsed < 6) return \"1\";\n    if (hoursElapsed < 12) return \"1\";\n    return \"1\";\n  };\n\n  // Handle the drag end event to update the marker's position\n\n  // Sync marker position with map center\n  const handleMapMove = (e: any) => {\n    setMapCenter({\n      longitude: e.viewState.longitude,\n      latitude: e.viewState.latitude,\n    });\n  };\n\n  const memoizedMarkers = useMemo(\n    () =>\n      reports.map((report) => (\n        <MotionMarker\n          key={report.id}\n          longitude={report.long}\n          latitude={report.lat}\n          color={getMarkerColor(report.trustScore)}\n          opacity={getMarkerOpacity(report.createdAt)}\n          anchor=\"bottom\"\n          // initial={{ opacity: 0, scale: 1.5 }}\n          // animate={{ opacity: 1, scale: 1 }}\n          // transition={{ duration: 2.5 }}\n        />\n      )),\n    [reports]\n  );\n\n  // Make marker draggable rather than centered in map\n  // const handleDragEnd = (e: any) => {\n  //   const { lng, lat } = e.lngLat;\n  //   setLongitude(lng);\n  //   setLatitude(lat);\n  // };\n\n  return (\n    <div className=\"h-[calc(100vh-66px)] w-screen relative\">\n      <div className=\"absolute left-10 top-10 z-10\">\n        <ModeToggle />\n      </div>\n      <Map\n        initialViewState={{\n          longitude: mapCenter.longitude,\n          latitude: mapCenter.latitude,\n          zoom: 14,\n        }}\n        onMove={handleMapMove}\n        style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}\n        mapStyle={`https://api.maptiler.com/maps/streets/style.json?key=${process.env.NEXT_PUBLIC_MAPTILER_KEY}`}\n      >\n        {memoizedMarkers}\n        {session ? (\n          <>\n            <Marker\n              longitude={mapCenter.longitude}\n              latitude={mapCenter.latitude}\n              anchor=\"bottom\"\n              scale={1}\n              //onDragEnd={handleDragEnd}\n              onClick={() => setShowPopup((prev) => !prev)}\n            />\n            {showPopup && (\n              <Popup\n                longitude={mapCenter.longitude}\n                latitude={mapCenter.latitude}\n                closeButton={true}\n                closeOnClick={false}\n                onClose={() => setShowPopup(false)}\n                anchor=\"bottom\"\n                offset={60}\n              >\n                {reportTypes.length > 0 ? (\n                  <PopupForm\n                    latitude={mapCenter.latitude}\n                    longitude={mapCenter.longitude}\n                    reportTypes={reportTypes}\n                    userId={userId}\n                    trustScore={trustScore}\n                    onSubmit={(payload) => {\n                      // Your submission handling here.\n                      console.log(\"Payload submitted:\", payload);\n                      setShowPopup(false);\n                    }}\n                    onClose={() => setShowPopup(false)}\n                  />\n                ) : (\n                  <p>Loading...</p>\n                )}\n              </Popup>\n            )}\n          </>\n        ) : (\n          <>\n            {showFormPopup && (\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-4 rounded-sm shadow-sm\">\n                <button\n                  onClick={() => setShowFormPopup(false)}\n                  className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-800\"\n                >\n                  ‚úï\n                </button>\n                <p className=\"text-black\">\n                  Please sign in to interact with the map.\n                </p>\n              </div>\n            )}\n          </>\n        )}\n      </Map>\n    </div>\n  );\n};\n\nexport default Page;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 585, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}