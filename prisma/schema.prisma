generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamp(6)
  refreshTokenExpiresAt DateTime? @db.Timestamp(6)
  scope                 String?
  password              String?
  createdAt             DateTime  @db.Timestamp(6)
  updatedAt             DateTime  @db.Timestamp(6)
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model session {
  id        String   @id
  expiresAt DateTime @db.Timestamp(6)
  token     String   @unique
  createdAt DateTime @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum Role {
  user
  moderator
  admin
}

model user {
  id            String     @id
  name          String
  email         String     @unique
  emailVerified Boolean
  role          Role       @default(user)
  createdAt     DateTime   @db.Timestamp(6)
  updatedAt     DateTime   @db.Timestamp(6)
  username      String?    @unique
  account       account[]
  session       session[]
  report        Report[]
  vote          Vote[]
  blogPosts     BlogPost[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @db.Timestamp(6)
  createdAt  DateTime? @db.Timestamp(6)
  updatedAt  DateTime? @db.Timestamp(6)
}

model GlobalSettings {
  id                Int     @id @default(autoincrement())
  mapCenterLat      Float   @default(40.730610) // Default to NYC
  mapCenterLng      Float   @default(-73.935242)
  mapBoundsSwLat    Float?
  mapBoundsSwLng    Float?
  mapBoundsNeLat    Float?
  mapBoundsNeLng    Float?
  mapZoom           Int     @default(12)
  mapZoomMin        Int     @default(10)
  mapZoomMax        Int     @default(18)
  mapApiKey         String?
  mapOpenToVisitors Boolean @default(true) // Can visitors see the map?
  submitReportsOpen Boolean @default(false) // Can visitors submit reports?
  registrationMode  String  @default("open") // "open" or "invite-only"
  verifyPermission  String  @default("admin") // "admin" or "moderator"
  aboutContent      String? @db.Text
  blogEnabled       Boolean @default(false)
}

model InviteCode {
  id        String    @id @default(uuid()) // Unique identifier
  code      String    @unique // The actual invite code
  createdAt DateTime  @default(now()) // When the code was created
  expiresAt DateTime? // Optional: Expiration date
  usedBy    String? // Optional: Track which user used the code
  isUsed    Boolean   @default(false) // Has the code been used?
}

model Report {
  id                   Int        @id @default(autoincrement())
  reportType           ReportType @relation(fields: [reportTypeId], references: [id])
  reportTypeId         Int
  lat                  Float // Latitude coordinate
  long                 Float // Longitude coordinate
  description          Json? // Optional: extra details or description, ex. "Police are blocking the road", license plates, etc.
  image                String? // Optional: URL to an image
  createdAt            DateTime   @default(now())
  updatedAt            DateTime?  @updatedAt
  departedAt           DateTime? // Optional: time the entry left
  trustScore           Int //Set at creation of the report and tied to the user's trust score 
  confirmationCount    Int        @default(0) // Number of times this report has been confirmed
  disconfirmationCount Int        @default(0) // Number of times this report has been disconfirmed
  isVisible            Boolean    @default(true) // Whether the report is visible to other users
  isVerified           Boolean    @default(false) // Whether verified by admin/mod
  // Who submitted the report
  submittedBy          user?      @relation(fields: [submittedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  submittedById        String?
  deletedUserId        String? // If the user is deleted, this will be set to the user's ID
  // Votes on this report
  votes                Vote[]
}

model ReportType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  fields    Json // fields available for this report type
  reports   Report[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  value     Int // For example: 1 for a positive vote, -1 for a negative vote
  createdAt DateTime @default(now())
  // The user casting the vote
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    String?
  // The report being voted on
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  Int

  @@unique([userId, reportId])
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?    @db.Text
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?
  authorId    String
  author      user       @relation(fields: [authorId], references: [id])
  categories  Category[]

  @@index([authorId])
}

model Category {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  posts BlogPost[]
}
